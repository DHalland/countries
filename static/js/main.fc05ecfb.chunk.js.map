{"version":3,"sources":["components/searchbar.js","components/country.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","name","className","id","this","htmlFor","type","onKeyDown","handleEnter","placeholder","Component","Country","setState","country","info","alpha2Code","numericCode","population","capital","region","subregion","timezones","currencies","languages","borders","href","style","backgroundImage","flag","background","App","e2","key","target","value","fetchCountryInfo","image1","image2","url","fetch","then","result","json","results","urls","full","backgroundimg","console","log","fetchImages","bind","undefined","map","x","fetchInfo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc05ecfb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = { name: \"\" };\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"container-fluid\">\r\n            <div id=\"header\" className=\"row\">\r\n               <div id=\"name\" className=\"col-4\">\r\n                  <p id=\"countryName\">{this.props.name}</p>\r\n               </div>\r\n               <div className=\"form-group col-8\">\r\n                  <label id=\"search\" htmlFor=\"formGroupExampleInput\"></label>\r\n                  <input\r\n                     type=\"text\"\r\n                     onKeyDown={this.props.handleEnter}\r\n                     className=\"searchbox__input typeahead form-control\"\r\n                     id=\"formGroupExampleInput\"\r\n                     placeholder=\"Search For Country...\"\r\n                  ></input>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SearchBar from \"./searchbar\";\r\n\r\nclass Country extends Component {\r\n   searchHandler() {\r\n      this.setState({\r\n         country: this.props.info,\r\n         name: \"\"\r\n      });\r\n   }\r\n\r\n   render() {\r\n      let api_key = process.env.REACT_APP_API_KEY;\r\n      let country = this.props.info;\r\n      let name = country.name,\r\n         alpha2Code = country.alpha2Code,\r\n         numericCode = country.numericCode,\r\n         population = country.population,\r\n         capital = country.capital,\r\n         region = country.region,\r\n         subregion = country.subregion,\r\n         timezones = country.timezones,\r\n         currencies = country.currencies,\r\n         languages = country.languages,\r\n         borders = country.borders;\r\n\r\n      return (\r\n         <div className=\"container-fluid\">\r\n            <div className=\"row\" id=\"info\">\r\n               <div className=\"col-12\">\r\n                  <p className=\"bubble\">Capital: {capital}</p>\r\n                  <br></br>\r\n                  <p className=\"bubble\">Population: {population}</p>\r\n                  <br></br>\r\n                  <p className=\"bubble\">Country Code: {alpha2Code}</p>\r\n                  <br></br>\r\n                  <p className=\"bubble\">Region: {region}</p>\r\n                  <br></br>\r\n                  <p className=\"bubble\">SubRegion: {subregion}</p>\r\n                  <br></br>\r\n                  <p className=\"bubble\">Numeric Code: {numericCode}</p>\r\n                  <br></br>\r\n\r\n                  <div className=\"button\">\r\n                     <a\r\n                        href=\"#moreInfo\"\r\n                        className=\"btn btn-dark btn-xl page-scroll\"\r\n                     >\r\n                        More Info\r\n                     </a>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n            <div\r\n               style={{ backgroundImage: \"url(\" + this.props.flag + \")\" }}\r\n               className=\"row\"\r\n               id=\"flag\"\r\n            >\r\n               <div className=\"col-12\"></div>\r\n            </div>\r\n            <div\r\n               style={{ backgroundImage: \"url(\" + this.props.background + \")\" }}\r\n               className=\"row\"\r\n               id=\"moreInfo\"\r\n            >\r\n               <div className=\"col-12\">\r\n                  <p className=\"left\">Timezones: {timezones}</p>\r\n                  <br></br>\r\n                  <p className=\"left\">Primary Currency: {currencies}</p>\r\n                  <br></br>\r\n                  <p className=\"left\">Primary Language: {languages}</p>\r\n                  <br></br>\r\n                  <p className=\"left\">Borders: {borders}</p>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         // <div>\r\n         //    <center>\r\n         //       <h1></h1>\r\n         //    </center>\r\n         //    <div className=\"card\">\r\n         //       <div className=\"card-body\">\r\n         //          <h3 className=\"card-title\">{name}</h3>\r\n         //          <h6 className=\"card-subtitle mb-2 text-muted\">\r\n         //             Population: {population}\r\n         //          </h6>\r\n         //          <h6 className=\"card-subtitle mb-2 text-muted\">\r\n         //             Capital: {capital}\r\n         //          </h6>\r\n         //       </div>\r\n         //    </div>\r\n         // </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Country;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Country from \"./components/country\";\r\nimport SearchBar from \"./components/searchbar\";\r\n\r\nclass App extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         name: \"switzerland\",\r\n         flag: \"https://restcountries.eu/data/che.svg\",\r\n         image1:\r\n            \"https://images.unsplash.com/photo-1530122037265-a5f1f91d3b99?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80\",\r\n         image2:\r\n            \"https://images.unsplash.com/photo-1527095655060-4026c4af2b25?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80\"\r\n      };\r\n   }\r\n\r\n   handleEnter = e2 => {\r\n      if (e2.key === \"Enter\") {\r\n         this.setState(\r\n            {\r\n               name: e2.target.value\r\n            },\r\n            () => {\r\n               this.fetchCountryInfo(this.state.name);\r\n            }\r\n         );\r\n      }\r\n   };\r\n\r\n   fetchImages(url) {\r\n      fetch(url)\r\n         .then(result => result.json())\r\n         .then(json => {\r\n           // if (json[0] !== undefined) {\r\n               this.setState({\r\n                  image1: json.results[0].urls.full,\r\n                  image2: json.results[1].urls.full\r\n               });\r\n           // }\r\n         });\r\n   }\r\n\r\n   render() {\r\n      const api_key = process.env.REACT_APP_API_KEY;\r\n      let countryName = \"\";\r\n      if (this.state.name === \"United States of America\") {\r\n         countryName = \"USA\";\r\n      } else {\r\n         countryName = this.state.name;\r\n      }\r\n      let backgroundimg =\r\n         \"https://api.unsplash.com/search/photos?query=\" +\r\n         countryName +\r\n         \"&orientation=landscape&client_id=\" +\r\n         api_key;\r\n      console.log(backgroundimg);\r\n      this.fetchImages(backgroundimg);\r\n\r\n      return (\r\n         <div>\r\n            <div\r\n               id=\"top\"\r\n               style={{ backgroundImage: \"url(\" + this.state.image1 + \")\" }}\r\n               className=\"row\"\r\n            >\r\n               <SearchBar\r\n                  handleEnter={this.handleEnter.bind(this)}\r\n                  name={this.state.name}\r\n               />\r\n               <Country\r\n                  background={this.state.image2}\r\n                  flag={this.state.flag}\r\n                  info={this.state}\r\n               />\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n\r\n   fetchInfo(url) {\r\n      fetch(url)\r\n         .then(result => result.json())\r\n         .then(json => {\r\n            if (json[0] !== undefined) {\r\n               this.setState({\r\n                  alpha2Code: json[0].alpha2Code,\r\n                  numericCode: json[0].numericCode,\r\n                  name: json[0].name,\r\n                  capital: json[0].capital,\r\n                  population: json[0].population,\r\n                  region: json[0].region,\r\n                  subregion: json[0].subregion,\r\n                  timezones: json[0].timezones.map(x => x + \" \"),\r\n                  currencies: json[0].currencies[0].name,\r\n                  languages: json[0].languages[0].name,\r\n                  flag: json[0].flag,\r\n                  borders: json[0].borders.map(x => x + \" \")\r\n               });\r\n            }\r\n         });\r\n   }\r\n\r\n   fetchCountryInfo(name) {\r\n      let url = \"https://restcountries.eu/rest/v2/name/\" + name;\r\n      this.fetchInfo(url);\r\n   }\r\n\r\n   componentDidMount() {\r\n      let url = \"https://restcountries.eu/rest/v2/name/\" + this.state.name;\r\n      this.fetchInfo(url);\r\n   }\r\n\r\n   // THIS RENDER METHOD RENDERS EACH COUNTRY NAME WITHOUT\r\n   // IMPORTING COUNTRIES.JS\r\n   //\r\n   //  render() {\r\n   //     var { countries } = this.state;\r\n   //     return (\r\n   //        <div className=\"App\">\r\n   //           <ul>\r\n   //              {countries.map(country => (\r\n   //                 <li key={country.alpha3Code}>{country.name}</li>\r\n   //              ))}\r\n   //           </ul>\r\n   //        </div>\r\n   //     );\r\n   //  }\r\n\r\n   // THE COMMENTED CODE BELOW IS ANOTHER WAY OF DOING THE SAME THING\r\n   //\r\n   //  state = {\r\n   //     countries: []\r\n   //  };\r\n\r\n   //  async componentDidMount() {\r\n   //     const url = \"https://restcountries.eu/rest/v2/name/col\";\r\n   //     const response = await fetch(url);\r\n   //     const data = await response.json();\r\n   //     console.log(data[0].name);\r\n   //     this.setState({ country: data[0] });\r\n   //     //console.log(data);\r\n   //  }\r\n\r\n   //  render() {\r\n   //    return (\r\n   //      <div>\r\n   //        <p>{JSON.stringify(this.state.countries)}</p>\r\n   //      </div>\r\n   //    )\r\n   //  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}